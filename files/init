#!/bin/sh /etc/rc.common
# Copyright (C) 2023 muink
#
# depends 

. /lib/functions.sh

START=99
USE_PROCD=1
# alwaysonline
PROG='/usr/sbin/alwaysonline'
HOSTFILE='/var/hosts/alwaysonline'
# uci
CONFIG_NAME='alwaysonline'
TYPEDSECTION='alwaysonline'
DOMAINS='domain'


init_hosts() {
	mkdir -p "${HOSTFILE%/*}" 2>/dev/null
	echo "# auto-generated config file from /etc/config/alwaysonline" > "${HOSTFILE}"
}

write_hosts() {
	local count=$(uci show $CONFIG_NAME|grep "$DOMAINS"|tail -n1|sed -En "s|.+@.+\[(.+)\].+|\1|p")
	local domain_list lan_addr4 lan_addr6

. /lib/functions/network.sh

network_get_ipaddr  lan_addr4 $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
network_get_ipaddr6 lan_addr6 $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)

for i in $(seq 0 1 $count); do
	[ "$(uci -q get $CONFIG_NAME.@$DOMAINS[$i].enabled)" == "0" ] && continue

	local ucivv="name group net_proto overwrite"
	for _var in $ucivv; do
		eval "local $_var=\$(uci -q get $CONFIG_NAME.@$DOMAINS[$i].$_var)"
	done
	local net_protocols
	[ "$net_proto" == "both" ] && net_protocols="4 6" || net_protocols="$net_proto"

for proto in $net_protocols; do
	eval "domain_list=\"\${domain_list}\${overwrite:-\$lan_addr$proto} \${name}\n\""
done

done

# white hosts
sed -Ei "1a$domain_list" "$HOSTFILE"
}

start_instance() {
	procd_open_instance "$CONFIG_NAME"
	procd_set_param command "$PROG"
	procd_set_param respawn
	procd_set_param user alwayson
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
	local enabled

	config_load "$CONFIG_NAME"
	eval "enabled=\$CONFIG_${CONFIG_SECTIONS%% *}_enabled"
	[ "${enabled:=0}" == "0" ] && stop_service && return 1

	init_hosts
	write_hosts
	/etc/init.d/dnsmasq reload
	start_instance
}

service_triggers() {
	procd_add_reload_trigger "$CONFIG_NAME"
}

stop_service() {
	init_hosts
	/etc/init.d/dnsmasq reload
}
