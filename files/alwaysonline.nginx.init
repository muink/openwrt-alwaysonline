#!/bin/sh /etc/rc.common
# Copyright (C) 2023 muink
#
# depends 

. "${IPKG_INSTROOT}/lib/functions/network.sh"

START=99
USE_PROCD=1
# alwaysonline
PROG='/usr/sbin/alwaysonline'
HOSTFILE='/var/hosts/alwaysonline'
PORT=8083
# nginx
ALWSONL_CONF='/etc/nginx/conf.d/alwaysonline.conf'
# uci
CONFIG_NAME='alwaysonline'
TYPEDSECTION='alwaysonline'
DOMAINS='domain'
# ipaddr
network_get_ipaddr  LAN_ADDR  $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
network_get_ipaddr6 LAN_ADDR6 $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)

config_load "$CONFIG_NAME"


validate_section_domain() {
	uci_load_validate $CONFIG_NAME $DOMAINS "$1" "$2" \
		'enabled:bool:0' \
		'name:hostname' \
		'group:string' \
		'family:or("4", "6", "both"):both' \
		'overwrite:ipaddr'
}

init_hosts() {
	mkdir -p "${HOSTFILE%/*}" 2>/dev/null
	echo "# auto-generated config file from /etc/config/alwaysonline" > "${HOSTFILE}"
}

gen_hosts() {
	[ "$2" == "0" ] || { >&2 echo "section $1 validation failed"; return 1; }
	[ "$enabled" == "0" ] && return 0

	domain_list="${domain_list:+$domain_list|}${name}"

	local familys lan_v4="$LAN_ADDR" lan_v6="$LAN_ADDR6"
	[ "$family" == "both" ] && familys="4 6" || familys="$family"
	for v in $familys; do
		eval "host_list=\"\${host_list}\${overwrite:-\$lan_v$v} \${name}\n\""
	done
}

init_nginx() {
	mkdir -p "/var/${ALWSONL_CONF%/*}" 2>/dev/null
	cat /dev/null > "/var/${ALWSONL_CONF}"
}

white_nginx() {
	for d in ${domain_list//|/ }; do
		cat <<-EOF
		server {
		    listen 80;
		    listen [::]:80;
		    server_name $d;
		    include restrict_locally;
		    include conf.d/alwaysonline/*.locations;
		    access_log off; # logd openwrt;
		}
		
		EOF
	done
}

start_instance() {
	procd_open_instance "$CONFIG_NAME"
	procd_set_param command "$PROG"
	procd_append_param netdev "br-lan"
	procd_set_param respawn
	procd_set_param user nobody
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
	local enabled

	eval "enabled=\$CONFIG_${CONFIG_SECTIONS%% *}_enabled"
	[ "${enabled:=0}" == "0" ] && stop_service && return 1
	stop_service

	# DNS
	local domain_list='' host_list=''
	config_foreach validate_section_domain "$DOMAINS" gen_hosts || return $?
	sed -Ei "1a$host_list" "$HOSTFILE"
	/etc/init.d/dnsmasq reload
	# Reverse proxy
	white_nginx > "${ALWSONL_CONF}"
	/etc/init.d/nginx reload
	# HTTP
	start_instance
}

service_triggers() {
	procd_add_reload_trigger "$CONFIG_NAME" 'network'

	local iface=$(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
	[ -n "$iface" ] && procd_add_reload_interface_trigger "$iface"
}

stop_service() {
	# DNS
	init_hosts
	/etc/init.d/dnsmasq reload
	# Reverse proxy
	init_nginx
	/etc/init.d/nginx reload
}
