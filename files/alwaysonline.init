#!/bin/sh /etc/rc.common
# Copyright (C) 2023 muink
#
# depends 

. /lib/functions.sh

START=99
USE_PROCD=1
# alwaysonline
[ -x "$(which nft)" ] && FW='fw4' || FW='fw3'
PROG='/usr/sbin/alwaysonline'
HOSTFILE='/var/hosts/alwaysonline'
# uci
CONFIG_NAME='alwaysonline'
TYPEDSECTION='alwaysonline'
DOMAINS='domain'


# subnet_format <destination variable> <subnet>
# <subnet> format: 192.168.1.1/24
subnet_format() {
[ "$#" -ge 2 ] || return 1

local insubnet="$2"
local address=${insubnet%/*}
local mlen=${insubnet#*/}
local FULL_MASK_INT=$((0xFFFFFFFF))
local MASK_LEN=$mlen
local LEFT_MOVE="$(( 32 - ${MASK_LEN} ))"
local N="$(( ${FULL_MASK_INT} << ${LEFT_MOVE} ))"
local M1="$(( ($N & 0xFF000000) >> 24 ))"
local M2="$(( ($N & 0x00FF0000) >> 16 ))"
local M3="$(( ($N & 0x0000FF00) >> 8 ))"
local M4="$((  $N & 0x000000FF ))"
#local mask="$M1.$M2.$M3.$M4"
local outsubnet="$(echo $(for i in $(seq 1 4); do eval "echo \$(( \$(echo $address|cut -f$i -d'.') & \$M$i ))"; done)|sed 's| |.|g')/$mlen"
eval "$1=\$outsubnet"
}

# subnet_format6 <destination variable> <subnet6>
# <subnet6> format: fc02:2f31:3376::345/60
subnet_format6() {
[ "$#" -ge 2 ] || return 1

local insubnet="$2"
local address=${insubnet%/*}
local mlen=${insubnet#*/}
# ipv4 suffix format
local ipv4_suffix=$(echo ${address}|sed -En "s|.+:(\d+(\.\d+){3})$|\1|p")
if [ -n "$ipv4_suffix" ]; then
address=\
$(echo $address|sed "s|$ipv4_suffix|\
$(printf %x $(( $(echo $ipv4_suffix|cut -f1 -d'.') & 0xFF )) | sed -E 's|^(\d)$|0\1|')\
$(printf %x $(( $(echo $ipv4_suffix|cut -f2 -d'.') & 0xFF )) | sed -E 's|^(\d)$|0\1|')\
:\
$(printf %x $(( $(echo $ipv4_suffix|cut -f3 -d'.') & 0xFF )) | sed -E 's|^(\d)$|0\1|')\
$(printf %x $(( $(echo $ipv4_suffix|cut -f4 -d'.') & 0xFF )) | sed -E 's|^(\d)$|0\1|')\
|")
fi
# double colon
if [ -n "$(echo $address|grep '::')" ]; then
local blocks=$(( 8 - $(echo $address|awk '{print gsub(/[[:xdigit:]]+/,"&")}') ))
address=\
$(echo $address|sed "s|::|:\
$(for i in $(seq 1 $blocks); do echo 0:; done|tr -d '\n')\
|")
address=${address#:}; address=${address%:}
fi
local HALF_MASK_INT=$((0xFFFFFFFFFFFFFFFF))
local MASK_LEN=$mlen
local H_MASK=$([ "$MASK_LEN" -lt  "64" ] && echo     $MASK_LEN                             || echo 64)
local L_MASK=$([ "$MASK_LEN" -lt "128" ] && echo $(( $MASK_LEN - 64 )) | sed '/-/ s|.*|0|' || echo 64)
local H_LEFT_MOVE=$(( 64 - $H_MASK ))
local L_LEFT_MOVE=$(( 64 - $L_MASK ))
local H_N L_N
[ "${H_LEFT_MOVE}" -eq "64" ] && H_N=0 || H_N="$(( ${HALF_MASK_INT} << ${H_LEFT_MOVE} ))"
[ "${L_LEFT_MOVE}" -eq "64" ] && L_N=0 || L_N="$(( ${HALF_MASK_INT} << ${L_LEFT_MOVE} ))"
local M1="$(( (($H_N & 0xFFFF000000000000) >> 48 ) & 0xFFFF ))"
local M2="$((  ($H_N & 0x0000FFFF00000000) >> 32 ))"
local M3="$((  ($H_N & 0x00000000FFFF0000) >> 16 ))"
local M4="$((   $H_N & 0x000000000000FFFF  ))"
local M5="$(( (($L_N & 0xFFFF000000000000) >> 48 ) & 0xFFFF ))"
local M6="$((  ($L_N & 0x0000FFFF00000000) >> 32 ))"
local M7="$((  ($L_N & 0x00000000FFFF0000) >> 16 ))"
local M8="$((   $L_N & 0x000000000000FFFF ))"
#local mask="$M1:$M2:$M3:$M4:$M5:$M6:$M7:$M8"
local outsubnet="$(echo $(for i in $(seq 1 8); do eval "printf %x \$(( 0x\$(echo $address|cut -f$i -d':') & \$M$i ))"; echo ''; done)|sed 's| |:|g')/$mlen"
eval "$1=\$(echo \$outsubnet|sed -E 's|:(0+:)+|::|;s|^0::|::|;s|::0/|::/|')"
}

init_hosts() {
	mkdir -p "${HOSTFILE%/*}" 2>/dev/null
	echo "# auto-generated config file from /etc/config/alwaysonline" > "${HOSTFILE}"
}

# write_hosts <fake_ip4> <fake_ip6>
write_hosts() {
	[ "$#" -ge 2 ] || return 0
	local _fake_ip4="$1" && shift
	local _fake_ip6="$1" && shift

	local count=$(uci show $CONFIG_NAME|grep "$DOMAINS"|tail -n1|sed -En "s|.+@.+\[(.+)\].+|\1|p")
	local domain_list

for i in $(seq 0 1 $count); do
	[ "$(uci -q get $CONFIG_NAME.@$DOMAINS[$i].enabled)" == "0" ] && continue

	local ucivv="name group family overwrite"
	for _var in $ucivv; do
		eval "local $_var=\$(uci -q get $CONFIG_NAME.@$DOMAINS[$i].$_var)"
	done
	local familys
	[ "$family" == "both" ] && familys="4 6" || familys="$family"

for v in $familys; do
	eval "domain_list=\"\${domain_list}\${overwrite:-\$_fake_ip$v} \${name}\n\""
done

done

# white hosts
sed -Ei "1a$domain_list" "$HOSTFILE"
}

# write_fw_rule <fake_ip4> <server_port>
write_fw_rule() {
	[ "$#" -ge 1 ] || return 0
	local _fake_ip4="$1" && shift
	local _server_port="$1" && shift
	local _bind_port='80'
	local _proto='tcp'

. /lib/functions/network.sh
# iptables  -t nat -F ALWAYSONLINE-PREROUTING
# nft add chain inet fw4 alwaysonline_prerouting {}
local lan_addr lan_subnet #lan_addr6 lan_subnet6

network_get_ipaddr lan_addr $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
network_get_subnet lan_subnet $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
subnet_format lan_subnet "$lan_subnet"

#network_get_ipaddr6 lan_addr6 $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
#network_get_subnet6 lan_subnet6 $(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
#subnet_format6 lan_subnet6 "$lan_subnet6"

case "$FW" in
	fw4)
		nft add rule inet fw4 alwaysonline_prerouting iifname "\"br-lan\"" ip saddr $lan_subnet ip daddr ${_fake_ip4} $_proto dport ${_bind_port} dnat ip to ${lan_addr}:${_server_port} comment "\"alwaysonline_dnat\""
	;;
	fw3)
		iptables -t nat -A ALWAYSONLINE-PREROUTING -s $lan_subnet -d ${_fake_ip4}/32 -p $_proto -m $_proto --dport ${_bind_port} -m comment --comment "AlwaysOnline_DNAT" -j DNAT --to-destination ${lan_addr}:${_server_port}
	;;
esac
}

start_instance() {
	if   [ "$FW" == "fw4" ]; then
		nft -s -t -n list chain inet fw4 alwaysonline_prerouting >/dev/null 2>&1 || fw4 reload
	elif [ "$FW" == "fw3" ]; then
		iptables  -t nat -L ALWAYSONLINE-PREROUTING >/dev/null 2>&1 || fw3 reload
	fi

	procd_open_instance "$CONFIG_NAME"
	procd_set_param command "$PROG"
	procd_append_param netdev "br-lan"
	procd_set_param respawn
	procd_set_param user nobody
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
	local enabled

	config_load "$CONFIG_NAME"
	eval "enabled=\$CONFIG_${CONFIG_SECTIONS%% *}_enabled"
	[ "${enabled:=0}" == "0" ] && stop_service && return 1
	stop_service

	# DNS
	write_hosts '192.0.2.26' '::ffff:c000:21a'
	/etc/init.d/dnsmasq reload
	# Forward
	write_fw_rule '192.0.2.26' '8083'
	# HTTP
	start_instance
}

service_triggers() {
	procd_add_reload_trigger "$CONFIG_NAME" 'network' 'firewall'

	local iface=$(uci show network|grep "device='br-lan'"|cut -f2 -d'.'|head -n1)
	[ -n "$iface" ] && procd_add_interface_trigger "interface.*.up" "$iface" /etc/init.d/alwaysonline reload
}

stop_service() {
	# DNS
	init_hosts
	/etc/init.d/dnsmasq reload
	# Forward
	if   [ "$FW" == "fw4" ]; then
		nft flush chain inet fw4 alwaysonline_prerouting 2>/dev/null
	elif [ "$FW" == "fw3" ]; then
		iptables -t nat -F ALWAYSONLINE-PREROUTING 2>/dev/null
	fi
}

restart() {
	start
}
